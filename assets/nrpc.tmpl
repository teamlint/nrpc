{{- $pkgName := GoPackageName .}}
{{- $pkgSubject := GetPkgSubject .}}
{{- $pkgSubjectPrefix := GetPkgSubjectPrefix .}}
{{- $pkgSubjectParams := GetPkgSubjectParams .}}
// Code generated by protoc-gen-nrpc {.GetName}}. DO NOT EDIT. 

// Package {{$pkgName}} generated by protoc-gen-nrpc. sources: {{.GetName}}
package {{$pkgName}}

import (
	"context"
	"log"
	"time"

	"google.golang.org/protobuf/proto"
	"github.com/nats-io/nats.go"
	{{- range  GetExtraImports .}}
	{{.}}
	{{- end}}
	{{- if Prometheus}}
	"github.com/prometheus/client_golang/prometheus"
	{{- end}}
	"github.com/teamlint/nrpc"
)

{{- /*遍历服务*/}}
{{- range .Service}}
{{- $svcName := .GetName}}
{{- $svcSubject := GetServiceSubject .}}
{{- $svcSubjectParams := GetServiceSubjectParams .}}
{{- $svcMethods := .Method}}

// {{$svcName}}Service is the interface that providers of the service
// {{$svcName}} should implement.
type {{$svcName}}Service interface {
{{- range $svcMethods}}
{{- /*如果不是NoRequest模式*/}}
{{- if ne .GetInputType ".nrpc.NoRequest" }}
	{{- $resultType := GetResultType .}}
	{{- $methodName := .GetName}} {{- /*方法名称*/}}
	{{$methodName}}(ctx context.Context
		{{- range GetMethodSubjectParams . -}}{{- /*遍历方法主题参数*/ -}}
		, {{ . }} string
		{{- end -}}
		{{- /*如果不是nrpc.Void入参*/ -}}
		{{- if ne .GetInputType ".nrpc.Void" -}}
		, req *{{GoType .GetInputType}}
		{{- end -}}
		{{- /*如果是nrpc.sreamedReply*/ -}}
		{{- if HasStreamedReply . -}}
		, push func(*{{GoType .GetOutputType}})
		{{- end -}}
	)
	{{- /*输出参数*/}}
	{{- if ne $resultType ".nrpc.NoReply" }} (
		{{- /*如果是标准Req/Reply模型*/ -}}
		{{- if and (ne $resultType ".nrpc.Void") (not (HasStreamedReply .)) -}}
		*{{GoType $resultType}}, 
		{{- end -}}
		error)
	{{- end -}}
{{- end}} {{- /*非NoRequest模式结束*/}}
{{- end}} {{- /*遍历方法结束*/}}
}

{{- if Prometheus}}

var (
	// The request completion time, measured at client-side.
	clientRCTFor{{$svcName}} = prometheus.NewSummaryVec(
		prometheus.SummaryOpts{
			Name:       "nrpc_client_request_completion_time_seconds",
			Help:       "The request completion time for calls, measured client-side.",
			Objectives: map[float64]float64{0.9: 0.01, 0.95: 0.01, 0.99: 0.001},
			ConstLabels: map[string]string{
				"service": "{{$svcName}}",
			},
		},
		[]string{"method"})

	// The handler execution time, measured at server-side.
	serviceHETFor{{$svcName}} = prometheus.NewSummaryVec(
		prometheus.SummaryOpts{
			Name:       "nrpc_service_handler_execution_time_seconds",
			Help:       "The handler execution time for calls, measured server-side.",
			Objectives: map[float64]float64{0.9: 0.01, 0.95: 0.01, 0.99: 0.001},
			ConstLabels: map[string]string{
				"service": "{{$svcName}}",
			},
		},
		[]string{"method"})

	// The counts of calls made by the client, classified by result type.
	clientCallsFor{{$svcName}} = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "nrpc_client_calls_count",
			Help: "The count of calls made by the client.",
			ConstLabels: map[string]string{
				"service": "{{$svcName}}",
			},
		},
		[]string{"method", "encoding", "result_type"})

	// The counts of requests handled by the service, classified by result type.
	serviceRequestsFor{{.GetName}} = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "nrpc_service_requests_count",
			Help: "The count of requests handled by the service.",
			ConstLabels: map[string]string{
				"service": "{{$svcName}}",
			},
		},
		[]string{"method", "encoding", "result_type"})
)
{{- end}}

// {{.GetName}}Handler provides a NATS subscription handler that can serve a
// subscription using a given {{.GetName}}Service implementation.
{{- /*NRPC 订阅Handler*/}}
type {{$svcName}}Handler struct {
	ctx       context.Context
	workers   *nrpc.WorkerPool
	nc        nrpc.NatsConn
	service   {{$svcName}}Service
	encodings []string
}

{{- /*顺序Handler*/}}
func New{{$svcName}}Handler(ctx context.Context, nc nrpc.NatsConn, s {{$svcName}}Service) *{{$svcName}}Handler {
	return &{{$svcName}}Handler{
		ctx:       ctx,
		nc:        nc,
		service:   s,
		encodings: []string{"protobuf"},
	}
}

{{- /*并发Handler*/}}
func New{{$svcName}}ConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s {{$svcName}}Service) *{{$svcName}}Handler {
	return &{{$svcName}}Handler{
		workers: workers,
		nc:      nc,
		service:  s,
	}
}

// SetEncodings sets the output encodings when using a '*Publish' function
{{- /*设置消息编码方式*/}}
func (h *{{$svcName}}Handler) SetEncodings(encodings []string) {
	h.encodings = encodings
}

{{- /*获取消息订阅主题*/}}
func (h *{{$svcName}}Handler) Subject() string {
	return "{{$pkgSubjectPrefix}}
	{{- range $pkgSubjectParams -}}
		*.
	{{- end -}}
	{{$svcSubject}}
	{{- range $svcSubjectParams -}}
		.*
	{{- end -}}
	.>"
}
{{- /*遍历服务方法*/}}
{{- range $svcMethods}}
{{- $methodName := .GetName}}
{{- /*如果是NoRequest模式*/}}
{{- if eq .GetInputType ".nrpc.NoRequest"}}

func (h *{{$svcName}}Handler) {{$methodName}}Publish( 
	{{- range $pkgSubjectParams}}pkg{{.}} string, {{end -}} {{- /*包主题参数*/ -}}
	{{- range $svcSubjectParams}}svc{{.}} string, {{end -}} {{- /*服务主题参数*/ -}}
	{{- range GetMethodSubjectParams .}}mt{{.}} string, {{end -}} {{- /*方法主题参数*/ -}}
	msg *{{GoType .GetOutputType}}) error {
	for _, encoding := range h.encodings {
		rawMsg, err := nrpc.Marshal(encoding, msg)
		if err != nil {
			log.Printf("{{$svcName}}Handler.{{$methodName}}Publish: error marshaling the message: %s", err)
			return err
		}
		subject := "{{$pkgSubject}}."
		{{- range $pkgSubjectParams}} + pkg{{.}} + "."{{end -}}
		+ "{{$svcSubject}}."
		{{- range $svcSubjectParams}} + svc{{.}} + "."{{end -}}
		+ "{{GetMethodSubject .}}"
		{{- range GetMethodSubjectParams .}} + "." + mt{{.}}{{end}}
		if encoding != "protobuf" {
			subject += "." + encoding
		}
		if err := h.nc.Publish(subject, rawMsg); err != nil {
			return err
		}
	}
	return nil
}
{{- end}} {{- /*NoRequset模式结束*/}}
{{- end}} {{- /*遍历服务方法结束*/}}

{{- if ServiceNeedsHandler .}} {{- /*非NoRequest模式,需要设置NATS消息MsgHandler*/}}

func (h *{{$svcName}}Handler) MsgHandler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	{{ if ne 0 (len $pkgSubjectParams)}}pkgParams{{else}}_{{end -}},
	{{- if ne 0 (len $svcSubjectParams)}} svcParams{{else}} _{{end -}}
	, name, tail, err := nrpc.ParseSubject(
		"{{$pkgSubject}}", {{len $pkgSubjectParams}}, "{{GetServiceSubject .}}", {{len $svcSubjectParams}}, msg.Subject)
	if err != nil {
		log.Printf("{{$svcName}}Hanlder: {{$svcName}} subject parsing failed: %v", err)
		return
	}

	request.MethodName = name
	request.SubjectTail = tail

	{{- range $i, $name := $pkgSubjectParams }}
	request.SetPackageParam("{{$name}}", pkgParams[{{$i}}])
	{{- end }}
	{{- range $i, $name := $svcSubjectParams }}
	request.SetServiceParam("{{$name}}", svcParams[{{$i}}])
	{{- end }}

	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
		{{- range  $svcMethods}} {{- /*遍历服务方法*/}}
		{{ $methodName := .GetName }}
	case "{{GetMethodSubject .}}":
		{{- if eq .GetInputType ".nrpc.NoRequest"}}
		// {{$methodName}} is a no-request method. Ignore it.
		return
		{{- else}}{{/* !NoRequest */}}
		{{- if ne 0 (len (GetMethodSubjectParams .))}}
		var mtParams []string
		{{- end}}
		{{- if eq .GetOutputType ".nrpc.NoReply"}}
		request.NoReply = true
		{{- end}}
		{{if eq 0 (len (GetMethodSubjectParams .))}}_{{else}}mtParams{{end}}, request.Encoding, err = nrpc.ParseSubjectTail({{len (GetMethodSubjectParams .)}}, request.SubjectTail)
		if err != nil {
			log.Printf("{{$methodName}}Hanlder: {{$methodName}} subject parsing failed: %v", err)
			break
		}
		{{if eq .GetInputType ".nrpc.Void"}}
		req := new(nrpc.Void)
		{{else}}
		req := new({{GoType .GetInputType}})
		{{end}}
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, req); err != nil {
			log.Printf("{{$methodName}}Handler: {{$methodName}} request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
			{{- if Prometheus}}
			serviceRequestsFor{{$svcName}}.WithLabelValues(
				"{{$methodName}}", request.Encoding, "unmarshal_fail").Inc()
			{{- end}}
		} else { {{- /*反序列化成功*/}}
			{{- if HasStreamedReply .}} {{- /*如果是streamedReply*/}}
			request.EnableStreamedReply()
			request.Handler = func(ctx context.Context)(proto.Message, error){
				err := h.service.{{$methodName}}(ctx
				{{- range $i, $p := GetMethodSubjectParams . -}}
				, mtParams[{{ $i }}]
				{{- end -}}
				{{- if ne .GetInputType ".nrpc.Void" -}}
				, req
				{{- end -}}
				, func(rep *{{GoType .GetOutputType}}){
					request.SendStreamReply(rep)
				})
				return nil, err
			}
			{{- else }}
			request.Handler = func(ctx context.Context)(proto.Message, error){
				{{if eq .GetOutputType ".nrpc.NoReply" -}}
				innerResp := new(nrpc.NoReply)
				h.service.{{$methodName}}(ctx
				{{- else if eq .GetOutputType ".nrpc.Void" -}}
				innerResp := new(nrpc.Void)
				err := h.service.{{$methodName}}(ctx
				{{- else }} {{- /* Req/Reply 模式*/ -}}
				innerResp, err := h.service.{{$methodName}}(ctx
				{{- end -}}
				{{- range $i, $p := GetMethodSubjectParams . -}} {{- /*方法主题参数*/ -}}
				, mtParams[{{ $i }}]
				{{- end -}}
				{{- if ne .GetInputType ".nrpc.Void" -}}
				, req
				{{- end -}}
				)
				if err != nil {
					return nil, err
				}
				return innerResp, nil
			}
			{{- end }}
		}
		{{- end}}{{/* not HasStreamedReply */}} {{- /*case 处理结束*/}}
	{{- end}} {{- /*服务方法遍历结束*/}}
	default: {{- /*默认消息处理*/}}
		log.Printf("{{$svcName}}Handler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
		{{- if Prometheus}}
		serviceRequestsFor{{$svcName}}.WithLabelValues(
			"{{$svcName}}", request.Encoding, "name_fail").Inc()
		{{- end}}
	}

	{{- if Prometheus}}
	request.AfterReply = func(request *nrpc.Request, success, replySuccess bool) {
		if !replySuccess {
			serviceRequestsFor{{$svcName}}.WithLabelValues(
				request.MethodName, request.Encoding, "sendreply_fail").Inc()
		}
		if success {
			serviceRequestsFor{{$svcName}}.WithLabelValues(
				request.MethodName, request.Encoding, "success").Inc()
		} else {
			serviceRequestsFor{{$svcName}}.WithLabelValues(
				request.MethodName, request.Encoding, "handler_fail").Inc()
		}
		// report metric to Prometheus
		serviceHETFor{{$svcName}}.WithLabelValues(request.MethodName).Observe(
			request.Elapsed().Seconds())
	}
	{{- end}}

	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}

	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("{{$svcName}}Handler: {{$svcName}} handler failed to publish the response: %s", err)
			{{- if Prometheus}}
			serviceRequestsFor{{$svcName}}.WithLabelValues(
				request.MethodName, request.Encoding, "handler_fail").Inc()
			{{- end}}
		}
		{{- if Prometheus}}
		serviceHETFor{{$svcName}}.WithLabelValues(request.MethodName).Observe(
			request.Elapsed().Seconds())
		{{- end}}
	}
}
{{- end}}

type {{$svcName}}Client struct {
	nc                nrpc.NatsConn
	{{- if ne 0 (len $pkgSubject)}}
	PkgSubject       string
	{{- end}}
	{{- range $pkgSubjectParams}}
	PkgParam{{ . }} string
	{{- end}}
	Subject          string
	{{- range GetServiceSubjectParams .}}
	SvcParam{{ . }} string
	{{- end}}
	Encoding          string
	Timeout           time.Duration
}

func New{{$svcName}}Client(nc nrpc.NatsConn
	{{- range $pkgSubjectParams -}}
	, pkgParam{{.}} string
	{{- end -}}
	{{- range $svcSubjectParams  -}}
	, svcParam{{ . }} string
	{{- end -}}
	) *{{$svcName}}Client {
	return &{{$svcName}}Client{
		nc:      nc,
		{{- if ne 0 (len $pkgSubject)}}
		PkgSubject: "{{$pkgSubject}}",
		{{- end}}
		{{- range $pkgSubjectParams}}
		PkgParam{{.}}: pkgParam{{.}},
		{{- end}}
		Subject: "{{$svcSubject}}",
		{{- range $svcSubjectParams}}
		SvcParam{{.}}: svcParam{{.}},
		{{- end}}
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}

func (c *{{$svcName}}Client) SetEncoding(encoding string) {
	c.Encoding = encoding
}

func (c *{{$svcName}}Client) SetTimeout(t time.Duration) {
	c.Timeout = t
}
{{- range $svcMethods}} {{- /*遍历服务方法*/}}
{{- $methodName := .GetName}} {{- /*方法名称*/}}
{{- $resultType := GetResultType .}} {{- /*返回结果类型*/}}
{{- if eq .GetInputType ".nrpc.NoRequest"}} {{- /*模式类型条件开始,如果是NoRequest模式*/}}

func (c *{{$svcName}}Client) {{$methodName}}Subject(
	{{range GetMethodSubjectParams .}}mt{{.}} string,{{end}}
) string {
	subject := {{ if ne 0 (len $pkgSubject) -}}
		c.PkgSubject + "." + {{end}}
		{{- range $pkgSubjectParams -}}
		c.PkgParam{{.}} + "." + {{end -}}
		c.Subject + "." + {{range $svcSubjectParams -}}
		c.SvcParam{{.}} + "." + {{end -}}
		"{{GetMethodSubject .}}"
		{{- range GetMethodSubjectParams .}} + "." + mt{{.}}{{end}}
	if c.Encoding != "protobuf" {
		subject += "." + c.Encoding
	}
	return subject
}

type {{$svcName}}{{$methodName}}Subscription struct {
	*nats.Subscription
	encoding string
}
{{/*同步订阅消息处理*/}}
func (s *{{$svcName}}{{$methodName}}Subscription) Next(timeout time.Duration) (*{{GoType .GetOutputType}}, error) {
	reply := new({{GoType .GetOutputType}})
	msg, err := s.Subscription.NextMsg(timeout)
	if err != nil {
		return nil, err
	}
	err = nrpc.Unmarshal(s.encoding, msg.Data, reply)
	if err != nil {
		return nil, err
	}

	return reply, nil
}
{{/*创建同步订阅者并进行订阅*/}}
func (c *{{$svcName}}Client) {{$methodName}}SubscribeSync(
	{{range GetMethodSubjectParams .}}mt{{.}} string,{{end}}
) (*{{$svcName}}{{$methodName}}Subscription, error) {
	subject := c.{{$methodName}}Subject(
		{{range GetMethodSubjectParams .}}mt{{.}},{{end}}
	)
	natsSub, err := c.nc.SubscribeSync(subject)
	if err != nil {
		return nil, err
	}
	return &{{$svcName}}{{$methodName}}Subscription{natsSub, c.Encoding}, nil
}
{{/*异步订阅*/}}
func (c *{{$svcName}}Client) {{$methodName}}Subscribe(
	{{- range GetMethodSubjectParams .}}mt{{.}} string,{{end -}}
	handler func (*{{GoType .GetOutputType}})) (*nats.Subscription, error) {
	subject := c.{{$methodName}}Subject(
		{{range GetMethodSubjectParams .}}mt{{.}},{{end}}
	)
	sub, err := c.nc.Subscribe(subject, func(msg *nats.Msg){
		reply := new({{GoType .GetOutputType}})
		err := nrpc.Unmarshal(c.Encoding, msg.Data, reply)
		if err != nil {
			log.Printf("{{$svcName}}Client.{{$methodName}}Subscribe: Error decoding, %s", err)
			return 
		}
		handler(reply)
	})
	return sub, err
}
{{/*异步订阅返回管道*/}}
func (c *{{$svcName}}Client) {{$methodName}}SubscribeChan(
	{{range GetMethodSubjectParams .}}mt{{.}} string,{{end}}
) (<-chan *{{GoType .GetOutputType}}, *nats.Subscription, error) {
	ch := make(chan *{{GoType .GetOutputType}})
	sub, err := c.{{$methodName}}Subscribe(
		{{- range GetMethodSubjectParams .}}mt{{.}}, {{end -}}
		func (reply *{{GoType .GetOutputType}}) {
		ch <- reply
	})
	return ch, sub, err
}
{{/*NoRequest模式结束*/}}
{{- else if HasStreamedReply .}} {{- /*如果是streamedReply*/}}

func (c *{{$svcName}}Client) {{$methodName}}(
	ctx context.Context,
	{{- range GetMethodSubjectParams . -}}
	{{ . }} string,
	{{- end}}
	{{- if ne .GetInputType ".nrpc.Void"}}
	req *{{GoType .GetInputType}},
	{{- end}}
	cb func (context.Context, *{{GoType .GetOutputType}}),
) error {
	{{ if Prometheus}}
	start := time.Now()
	{{- end}}
	subject := {{ if ne 0 (len $pkgSubject) -}}
		c.PkgSubject + "." + {{end}}
		{{- range $pkgSubjectParams -}}
		c.PkgParam{{.}} + "." + {{end -}}
		c.Subject + "." + {{range $svcSubjectParams -}}
		c.SvcParam{{.}} + "." + {{end -}}
		"{{GetMethodSubject .}}"
		{{- range GetMethodSubjectParams . }} + "." + {{ . }}{{ end }}

	sub, err := nrpc.StreamCall(ctx, c.nc, subject
		{{- if ne .GetInputType ".nrpc.Void" -}}
		, req
		{{- else -}}
		, &nrpc.Void{}
		{{- end -}}
		, c.Encoding, c.Timeout)
	if err != nil {
		{{- if Prometheus}}
		clientCallsFor{{$svcName}}.WithLabelValues(
			"{{$methodName}}", c.Encoding, "error").Inc()
		{{- end}}
		return err
	}

	reply := new({{GoType .GetOutputType}})
	for {
		err = sub.Next(reply)
		if err != nil {
			break
		}
		cb(ctx, reply)
	}
	if err == nrpc.ErrEOS {
		err = nil
	}
	{{- if Prometheus}}
	// report total time taken to Prometheus
	elapsed := time.Since(start).Seconds()
	clientRCTFor{{$svcName}}.WithLabelValues("{{$methodName}}").Observe(elapsed)
	clientCallsFor{{$svcName}}.WithLabelValues(
		"{{$methodName}}", c.Encoding, "success").Inc()
	{{- end}}
	return err
}
{{/*streamedReply结束*/}}
{{- else}} {{- /*标准Req/Reply模型*/}}

func (c *{{$svcName}}Client) {{$methodName}}(
	{{- range GetMethodSubjectParams . -}}
	{{ . }} string, {{ end -}}
	{{- if ne .GetInputType ".nrpc.Void" -}}
	req *{{GoType .GetInputType}}
	{{- end -}}) (
	{{- if not (eq $resultType ".nrpc.Void" ".nrpc.NoReply") -}}
	*{{GoType $resultType}}, {{end -}}
	error) {
	{{- if Prometheus}}
	start := time.Now()
	{{- end}}
	subject := {{ if ne 0 (len $pkgSubject) -}} c.PkgSubject + "." + {{end}}
		{{- range $pkgSubjectParams -}} c.PkgParam{{.}} + "." + {{end -}}
		c.Subject + "." + {{range $svcSubjectParams -}} c.SvcParam{{.}} + "." + {{end -}}
		"{{GetMethodSubject .}}"
		{{- range GetMethodSubjectParams . }} + "." + {{.}}{{end}}

	{{- if eq .GetInputType ".nrpc.Void"}}
	req := new(nrpc.Void)
	{{- end}}
	{{- if eq $resultType ".nrpc.Void"}}
	resp := new(nrpc.Void)
	{{- else if eq $resultType ".nrpc.NoReply"}}
	resp := new(nrpc.NoReply)
	{{- else}}
	resp := new({{GoType $resultType}})
	{{- end}}
	err := nrpc.Call(req, resp, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		{{- if Prometheus}}
		clientCallsFor{{$svcName}}.WithLabelValues("{{$methodName}}", c.Encoding, "call_fail").Inc()
		{{- end}}

		{{- if (eq $resultType ".nrpc.Void" ".nrpc.NoReply")}}
		return err
		{{- else}}
		return nil, err
		{{- end}}
	}

	{{- if Prometheus}}
	// report total time taken to Prometheus
	elapsed := time.Since(start).Seconds()
	clientRCTFor{{$svcName}}.WithLabelValues("{{$methodName}}").Observe(elapsed)
	clientCallsFor{{$svcName}}.WithLabelValues("{{$methodName}}", c.Encoding, "success").Inc()
	{{- end}}

	{{- if eq $resultType ".nrpc.Void" ".nrpc.NoReply"}}
	return nil
	{{- else}}
	return resp, nil
	{{- end}}
}
{{- end}} {{- /*标准Req/Reply模型结束*/}}
{{- end}} {{- /*模式类型条件结束*/}}
{{- end}} {{- /*服务方法遍历结束*/}}

type Client struct {
	nc               nrpc.NatsConn
	defaultEncoding  string
	defaultTimeout   time.Duration
	{{- if ne 0 (len $pkgSubject)}}
	pkgSubject       string
	{{- end}}
	{{- range $pkgSubjectParams}}
	pkgParam{{.}} string
	{{- end}}

	{{- range .Service}} {{- /*遍历服务*/}}
	{{- $svcName := .GetName}}
	{{$svcName}} *{{$svcName}}Client
	{{- end}} {{- /*遍历服务结束*/}}
}

func NewClient(nc nrpc.NatsConn
	{{- range $pkgSubjectParams -}} , pkgParam{{.}} string {{- end -}}) *Client {
	c := Client{
		nc:               nc,
		defaultEncoding:  "protobuf",
		defaultTimeout:   5*time.Second,
		{{- if ne 0 (len $pkgSubject)}}
		pkgSubject:       "{{$pkgSubject}}",
		{{- end}}
		{{- range $pkgSubjectParams}}
		pkgParam{{.}}: pkgParam{{.}},
		{{- end}}
	}
	{{- range .Service}} {{- /*遍历服务开始*/}}
	{{- $svcName := .GetName}}
	{{- $svcSubjectParams := GetServiceSubjectParams .}}
	{{- if eq 0 (len $svcSubjectParams)}} {{- /*如果没有服务主题参数*/}}
	c.{{$svcName}} = New{{$svcName}}Client(nc
		{{- range $pkgSubjectParams -}}
		, c.pkgParam{{.}}
		{{- end}})
	{{- end}}
	{{- end}} {{- /*遍历服务结束*/}}
	return &c
}

func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	{{- range .Service}}
	if c.{{.GetName}} != nil {
		c.{{.GetName}}.Encoding = encoding
	}
	{{- end}}
}

func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	{{- range .Service}}
	if c.{{.GetName}} != nil {
		c.{{.GetName}}.Timeout = t
	}
	{{- end}}
}

{{- range .Service}} {{- /*遍历服务*/}}
{{- $svcName := .GetName}}
{{- $svcSubjectParams := GetServiceSubjectParams .}}
{{- if ne 0 (len $svcSubjectParams)}} {{- /*如果有服务主题参数, 使用额外的方法设置成员*/}}

func (c *Client) Set{{$svcName}}( {{- /*带参数的服务*/}}
	{{- range $svcSubjectParams}}
	{{.}} string,
	{{- end}}
) {
	c.{{$svcName}} = New{{$svcName}}Client(
		c.nc,
		{{- range $pkgSubjectParams}}
		c.pkgParam{{.}},
		{{- end}}
		{{- range $svcSubjectParams}}
		{{ . }},
		{{- end}}
	)
	c.{{$svcName}}.Encoding = c.defaultEncoding
	c.{{$svcName}}.Timeout = c.defaultTimeout
}

func (c *Client) New{{$svcName}}(
	{{- range $svcSubjectParams}}
	{{.}} string,
	{{- end}}
) *{{$svcName}}Client {
	client := New{{$svcName}}Client(
		c.nc,
		{{- range $pkgSubjectParams}}
		c.pkgParam{{.}},
		{{- end}}
		{{- range $svcSubjectParams}}
		{{.}},
		{{- end}}
	)
	client.Encoding = c.defaultEncoding
	client.Timeout = c.defaultTimeout
	return client
}
{{- end}} {{- /*带服务主题参数处理结束*/}}
{{- end}} {{- /*遍历服务结束*/}}

{{- if Prometheus}}

func init() {
{{- range .Service}}
	// register metrics for service {{.GetName}}
	prometheus.MustRegister(clientRCTFor{{.GetName}})
	prometheus.MustRegister(serviceHETFor{{.GetName}})
	prometheus.MustRegister(clientCallsFor{{.GetName}})
	prometheus.MustRegister(serviceRequestsFor{{.GetName}})
{{- end}}
}
{{- end}}
